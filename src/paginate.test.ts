import { expect, test, describe } from 'vitest';
import { paginateWithEllipsis } from './paginate';
import type { PaginateWithEllipsisArgs } from './paginate';

function serializedPaginateWithEllipsis(props: PaginateWithEllipsisArgs): string {
	const data = paginateWithEllipsis(props);

	return (
		props.currentPage.toString().padStart(2, '0') +
		' => ' +
		data.map((p) => (p.ellipsis ? '..' : p.page.toString().padStart(2, '0'))).join(' ')
	);
}

describe('paginateWithEllipsis tests', () => {
	test('works with default innerGroupSize, default outerGroupSize, totalPages: 10', () => {
		const testData: [number, string][] = [
			/***/ [1, '01 => 01 02 03 04 05 .. 10'],
			/***/ [2, '02 => 01 02 03 04 05 .. 10'],
			/***/ [3, '03 => 01 02 03 04 05 .. 10'],
			/***/ [4, '04 => 01 02 03 04 05 .. 10'],
			/***/ [5, '05 => 01 .. 04 05 06 .. 10'],
			/***/ [6, '06 => 01 .. 05 06 07 .. 10'],
			/***/ [7, '07 => 01 .. 06 07 08 09 10'],
			/***/ [8, '08 => 01 .. 06 07 08 09 10'],
			/***/ [9, '09 => 01 .. 06 07 08 09 10'],
			/**/ [10, '10 => 01 .. 06 07 08 09 10'],
		];
		testData.forEach(([currentPage, expected]) => {
			expect(serializedPaginateWithEllipsis({ totalPages: 10, currentPage })).toBe(expected);
		});
	});

	test('works with totalPages: 20, innerGroupSize: 3, outerGroupSize: 2', () => {
		const testData: [number, string][] = [
			/***/ [1, '01 => 01 02 03 04 05 06 .. 19 20'],
			/***/ [2, '02 => 01 02 03 04 05 06 .. 19 20'],
			/***/ [3, '03 => 01 02 03 04 05 06 .. 19 20'],
			/***/ [4, '04 => 01 02 03 04 05 06 .. 19 20'],
			/***/ [5, '05 => 01 02 03 04 05 06 .. 19 20'],
			/***/ [6, '06 => 01 02 .. 05 06 07 .. 19 20'],
			/***/ [7, '07 => 01 02 .. 06 07 08 .. 19 20'],
			/***/ [8, '08 => 01 02 .. 07 08 09 .. 19 20'],
			/***/ [9, '09 => 01 02 .. 08 09 10 .. 19 20'],
			/**/ [10, '10 => 01 02 .. 09 10 11 .. 19 20'],
			/**/ [11, '11 => 01 02 .. 10 11 12 .. 19 20'],
			/**/ [12, '12 => 01 02 .. 11 12 13 .. 19 20'],
			/**/ [13, '13 => 01 02 .. 12 13 14 .. 19 20'],
			/**/ [14, '14 => 01 02 .. 13 14 15 .. 19 20'],
			/**/ [15, '15 => 01 02 .. 14 15 16 .. 19 20'],
			/**/ [16, '16 => 01 02 .. 15 16 17 18 19 20'],
			/**/ [17, '17 => 01 02 .. 15 16 17 18 19 20'],
			/**/ [18, '18 => 01 02 .. 15 16 17 18 19 20'],
			/**/ [19, '19 => 01 02 .. 15 16 17 18 19 20'],
			/**/ [20, '20 => 01 02 .. 15 16 17 18 19 20'],
		];

		testData.forEach(([currentPage, expected]) => {
			expect(
				serializedPaginateWithEllipsis({
					totalPages: 20,
					innerGroupSize: 3,
					outerGroupSize: 2,
					currentPage,
				}),
			).toBe(expected);
		});
	});

	test('works with totalPages: 20, innerGroupSize: 5, outerGroupSize: 2', () => {
		const testData: [number, string][] = [
			/***/ [1, '01 => 01 02 03 04 05 06 07 08 .. 19 20'],
			/***/ [2, '02 => 01 02 03 04 05 06 07 08 .. 19 20'],
			/***/ [3, '03 => 01 02 03 04 05 06 07 08 .. 19 20'],
			/***/ [4, '04 => 01 02 03 04 05 06 07 08 .. 19 20'],
			/***/ [5, '05 => 01 02 03 04 05 06 07 08 .. 19 20'],
			/***/ [6, '06 => 01 02 03 04 05 06 07 08 .. 19 20'],
			/***/ [7, '07 => 01 02 .. 05 06 07 08 09 .. 19 20'],
			/***/ [8, '08 => 01 02 .. 06 07 08 09 10 .. 19 20'],
			/***/ [9, '09 => 01 02 .. 07 08 09 10 11 .. 19 20'],
			/**/ [10, '10 => 01 02 .. 08 09 10 11 12 .. 19 20'],
			/**/ [11, '11 => 01 02 .. 09 10 11 12 13 .. 19 20'],
			/**/ [12, '12 => 01 02 .. 10 11 12 13 14 .. 19 20'],
			/**/ [13, '13 => 01 02 .. 11 12 13 14 15 .. 19 20'],
			/**/ [14, '14 => 01 02 .. 12 13 14 15 16 .. 19 20'],
			/**/ [15, '15 => 01 02 .. 13 14 15 16 17 18 19 20'],
			/**/ [16, '16 => 01 02 .. 13 14 15 16 17 18 19 20'],
			/**/ [17, '17 => 01 02 .. 13 14 15 16 17 18 19 20'],
			/**/ [18, '18 => 01 02 .. 13 14 15 16 17 18 19 20'],
			/**/ [19, '19 => 01 02 .. 13 14 15 16 17 18 19 20'],
			/**/ [20, '20 => 01 02 .. 13 14 15 16 17 18 19 20'],
		];

		testData.forEach(([currentPage, expected]) => {
			expect(
				serializedPaginateWithEllipsis({
					totalPages: 20,
					innerGroupSize: 5,
					outerGroupSize: 2,
					currentPage,
				}),
			).toBe(expected);
		});
	});

	test('works with totalPages: 50, innerGroupSize: 7, outerGroupSize: 5', () => {
		const testData: [number, string][] = [
			/***/ [1, '01 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [2, '02 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [3, '03 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [4, '04 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [5, '05 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [6, '06 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [7, '07 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [8, '08 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/***/ [9, '09 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/**/ [10, '10 => 01 02 03 04 05 06 07 08 09 10 11 12 13 .. 46 47 48 49 50'],
			/**/ [11, '11 => 01 02 03 04 05 .. 08 09 10 11 12 13 14 .. 46 47 48 49 50'],
			/**/ [12, '12 => 01 02 03 04 05 .. 09 10 11 12 13 14 15 .. 46 47 48 49 50'],
			/**/ [13, '13 => 01 02 03 04 05 .. 10 11 12 13 14 15 16 .. 46 47 48 49 50'],
			/**/ [14, '14 => 01 02 03 04 05 .. 11 12 13 14 15 16 17 .. 46 47 48 49 50'],
			/**/ [15, '15 => 01 02 03 04 05 .. 12 13 14 15 16 17 18 .. 46 47 48 49 50'],
			/**/ [16, '16 => 01 02 03 04 05 .. 13 14 15 16 17 18 19 .. 46 47 48 49 50'],
			/**/ [17, '17 => 01 02 03 04 05 .. 14 15 16 17 18 19 20 .. 46 47 48 49 50'],
			/**/ [18, '18 => 01 02 03 04 05 .. 15 16 17 18 19 20 21 .. 46 47 48 49 50'],
			/**/ [19, '19 => 01 02 03 04 05 .. 16 17 18 19 20 21 22 .. 46 47 48 49 50'],
			/**/ [20, '20 => 01 02 03 04 05 .. 17 18 19 20 21 22 23 .. 46 47 48 49 50'],
			/**/ [21, '21 => 01 02 03 04 05 .. 18 19 20 21 22 23 24 .. 46 47 48 49 50'],
			/**/ [22, '22 => 01 02 03 04 05 .. 19 20 21 22 23 24 25 .. 46 47 48 49 50'],
			/**/ [23, '23 => 01 02 03 04 05 .. 20 21 22 23 24 25 26 .. 46 47 48 49 50'],
			/**/ [24, '24 => 01 02 03 04 05 .. 21 22 23 24 25 26 27 .. 46 47 48 49 50'],
			/**/ [25, '25 => 01 02 03 04 05 .. 22 23 24 25 26 27 28 .. 46 47 48 49 50'],
			/**/ [26, '26 => 01 02 03 04 05 .. 23 24 25 26 27 28 29 .. 46 47 48 49 50'],
			/**/ [27, '27 => 01 02 03 04 05 .. 24 25 26 27 28 29 30 .. 46 47 48 49 50'],
			/**/ [28, '28 => 01 02 03 04 05 .. 25 26 27 28 29 30 31 .. 46 47 48 49 50'],
			/**/ [29, '29 => 01 02 03 04 05 .. 26 27 28 29 30 31 32 .. 46 47 48 49 50'],
			/**/ [30, '30 => 01 02 03 04 05 .. 27 28 29 30 31 32 33 .. 46 47 48 49 50'],
			/**/ [31, '31 => 01 02 03 04 05 .. 28 29 30 31 32 33 34 .. 46 47 48 49 50'],
			/**/ [32, '32 => 01 02 03 04 05 .. 29 30 31 32 33 34 35 .. 46 47 48 49 50'],
			/**/ [33, '33 => 01 02 03 04 05 .. 30 31 32 33 34 35 36 .. 46 47 48 49 50'],
			/**/ [34, '34 => 01 02 03 04 05 .. 31 32 33 34 35 36 37 .. 46 47 48 49 50'],
			/**/ [35, '35 => 01 02 03 04 05 .. 32 33 34 35 36 37 38 .. 46 47 48 49 50'],
			/**/ [36, '36 => 01 02 03 04 05 .. 33 34 35 36 37 38 39 .. 46 47 48 49 50'],
			/**/ [37, '37 => 01 02 03 04 05 .. 34 35 36 37 38 39 40 .. 46 47 48 49 50'],
			/**/ [38, '38 => 01 02 03 04 05 .. 35 36 37 38 39 40 41 .. 46 47 48 49 50'],
			/**/ [39, '39 => 01 02 03 04 05 .. 36 37 38 39 40 41 42 .. 46 47 48 49 50'],
			/**/ [40, '40 => 01 02 03 04 05 .. 37 38 39 40 41 42 43 .. 46 47 48 49 50'],
			/**/ [41, '41 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [42, '42 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [43, '43 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [44, '44 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [45, '45 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [46, '46 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [47, '47 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [48, '48 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [49, '49 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
			/**/ [50, '50 => 01 02 03 04 05 .. 38 39 40 41 42 43 44 45 46 47 48 49 50'],
		];

		testData.forEach(([currentPage, expected]) => {
			expect(
				serializedPaginateWithEllipsis({
					totalPages: 50,
					innerGroupSize: 7,
					outerGroupSize: 5,
					currentPage,
				}),
			).toBe(expected);
		});
	});
});
